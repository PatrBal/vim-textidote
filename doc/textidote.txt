*textidote.txt*          Grammar checking of LaTeX files with `TeXtidote` from Vim
*textidote*
*vim-textidote*
*TeXtidote*


        _________        ____  ____  _    _        __         _          ~
       |  _   _  |      |_  _||_  _|/ |_ (_)      |  ]       / |_        ~
       |_/ | | \_|.---.   \ \  / / `| |-'__   .--.| |  .--. `| |-'.---.  ~
           | |   / /__\\   > `' <   | | [  |/ /'`\' |/ .'`\ \| | / /__\\ ~
          _| |_  | \__., _/ /'`\ \_ | |, | || \__/  || \__. || |,| \__., ~
         |_____|  '.__.'|____||____|\__/[___]'.__.;__]'.__.' \__/ '.__.' ~



For Neovim and Vim version above 8.0

==============================================================================
CONTENTS                                                     *TeXtidoteContents*

    1. Overview ......................................... |TeXtidoteOverview|
    2. Features ......................................... |TeXtidoteFeatures|
    3. Usage ............................................ |TeXtidoteUsage|
    4. Installation ..................................... |TeXtidoteInstall|
    5. Configuration .................................... |TeXtidoteConfig|
    6. Customization .................................... |TeXtidoteCustom|
    7. License .......................................... |TeXtidoteLicense|
    8. Changelog ........................................ |TeXtidoteChangelog|
    9. Credits .......................................... |TeXtidoteCredits|

==============================================================================
OVERVIEW                                                     *TeXtidoteOverview*

This plugin integrates `TeXtidote` into Vim and Neovim. `TeXtidote` provides
spell, grammar and style checking for LaTeX or Markdown documents. It is built
on top of `LanguageTool`. In fact, `TeXtidote` is able to remove all the markup
of the original file before calling `LanguageTool`, but it keeps track of the
relative position of words between the original and "clean text". In short,
`TeXtidote` is a version of `LanguageTool` made blind to LaTeX and Markdown
markup.

This plugin also integrates `LanguageTool` into Vim and Neovim, which was
already made available by other good plugins (e.g., `vim-LanguageTool` or 
`vim-grammarous`)

|https://github.com/sylvainhalle/textidote|
|https://languagetool.org|

|https://github.com/dpelle/vim-LanguageTool|
|https://github.com/rhysd/vim-grammarous|

==============================================================================
FEATURES                                                     *TeXtidoteFeatures*

 - Asynchronous spell, grammar and style checking of either the entire buffer
   or part of it, with highlighting of all the spelling and grammar errors in
   distinct colors.
 - A scratch buffer shows up, listing all the errors. Navigate the errors with 
   `[` and `]`, both in the scratch buffer and the original buffer. Press <CR> on
   an error in the scratch buffer to jump to that error. Hit <Tab> to fix it.
   The <Tab> shortcut opens a pop-up menu that you can navigate either with
   <C-N> (next) and <C-P> (previous), or <Down> and <Up>. Confirm a suggestion
   with <C-Y> (yes) or discard all suggestions with <C-E> (exit). The shortcut
   <CR> is also active when the cursor is on an error in the original buffer,
   and displays the current error in the scratch buffer.
 - You can discard an error by pressing <BS>, both in the scratch buffer and
   the original buffer. The <BS> discarding will not be remembered in a later
   grammar check with |vim-textidote|. If you have set the variable 
   |g:textidote_dictionary| (file containing a list of words to be ignored by
   `TeXtidote`), you can make the discarding of the error permanent by pressing
   first <S-BS>. This adds the current error to the list of words in that
   file. The shortcut <S-BS> is also active in visual mode, adding the current
   selection to the list of permanently discarded words. All the original
   mappings of `[`, `]`, <BS>, <S-BS>, <CR> and <Tab> are restored when the
   scratch buffer is cleared.
 - The location-list is populated, so that you can use location-list Vim
   commands such as `:lopen` to open the location-list window, `:lne` to jump
   to the next error, etc.
 - Optionally, a full html report of `TeXtidote` analysis can be displayed in
   the default browser.

==============================================================================
USAGE                                                           *TeXtidoteUsage*

The plugin provides the new command
`:[range]TeXtidoteToggle`
where the default `[range]` is the whole buffer, except in the case where there
is a visual selection which is then taken as the default `[range]`. This command
launches the checking of `[range]` by `TeXtidote`, highlights the corresponding
errors and open the scratch buffer listing all the errors. Subsequent
invocation of the same command closes the scratch buffer and clears the error
highlighting.

In addition, there are
`:[range]TeXtidoteCheck`
`:TeXtidoteClear`
which respectively activates the checking and clears it.

==============================================================================
INSTALLATION                                                  *TeXtidoteInstall*

Install |vim-textidote| using your favorite package manager, or use Vim's 
built-in package support:

    `mkdir -p ~/.vim/pack/PatrBal/start`
    `cd ~/.vim/pack/PatrBal/start`
    `git clone https://github.com/PatrBal/vim-textidote`
    `vim -u NONE -c "helptags vim-textidote/doc" -c q`

You must also install `TeXtidote`. Download the latest `textidote.jar` from 
|https://github.com/sylvainhalle/textidote|
and make sure that you have Java version 8 or later installed on your system. 

Alternatively, on macOS, you can install `TeXtidote` using `homebrew`. In that
case, the path to the `textidote.jar` in the `.vimrc` should be provided as:
`let g:textidote_jar =`
	`\ '/opt/homebrew/var/homebrew/linked/textidote/libexec/textidote.jar'`
`let g:textidote_jar =`
	`\ '/usr/local/var/homebrew/linked/textidote/libexec/textidote.jar'`
with silicon and intel homebrew, respectively. In my experience, the homebrew
`TeXtidote` is twice faster than the `textidote.jar` from the website.

If you want to be able to invoke directly `LanguageTool` instead of `TeXtidote`,
you must also download the latest LanguageTool folder from 
|https://languagetool.org/download|
to be able to run the corresponding `languagetool-commandline.jar` on your system.
Again, it is also available from `homebrew` on macOS.

==============================================================================
CONFIGURATION                                                  *TeXtidoteConfig*

It is convenient to create a mapping in your |vimrc| to quickly invoke the
plugin
`vnoremap <silent> <Leader>te :'<,'>TeXtidoteToggle<CR>`
`nnoremap <silent> <Leader>te :TeXtidoteToggle<CR>`

Even better, you can map:
`vnoremap <silent> <Leader>te` 
	`\:<C-U>let g:textidote_jar = $HOME . '/.vim/textidote.jar'<CR>`
	`\:'<,'>TeXtidoteToggle<CR>`
`nnoremap <silent> <Leader>te` 
	`\:let g:textidote_jar = $HOME . '/.vim/textidote.jar'<CR>`
	`\:TeXtidoteToggle<CR>`
`vnoremap <silent> <Leader>lt` 
	`\:<C-U>let g:textidote_jar = $HOME .' 
	`\'/LanguageTool-5.9/languagetool-commandline.jar'<CR>`
	`\:'<,'>TeXtidoteToggle<CR>`
`nnoremap <silent> <Leader>lt` 
	`\:let g:textidote_jar = $HOME .` 
	`\'/LanguageTool-5.9/languagetool-commandline.jar'<CR>`
	`\:TeXtidoteToggle<CR>`
so that `<Leader>te` will call `TeXtidote` and `<Leader>lt`, `LanguageTool`.

Several global variables can be set in your |vimrc| to configure the behavior
of the |vim-textidote| plugin.

*g:textidote_jar*
  Path to either `textidote.jar` or `languagetool-commandline.jar`. The name
  of the `.jar` file will also be used by |vim-textidote| to understand which
  checker you are using among `TeXtidote` and `LanguageTool`. So, do not rename
  the `.jar` files!

  Default value: `$HOME/.vim/textidote.jar`
  Examples:
  `:let g:textidote_jar =`
	`\ '/opt/homebrew/var/homebrew/linked/textidote/libexec/textidote.jar'`
  `:let g:textidote_jar =`
	`\ '/opt/homebrew/var/homebrew/linked/languagetool/libexec/languagetool-commandline.jar'`

*g:textidote_html_report*
  Set to `1` if you want to have a html `TeXtidote` report showing up in your
  default browser, in addition to the scratch buffer in Vim. This option is
  only available when `TeXtidote` is the checker (it defaults to 0 otherwise).

  Default value: `0`
  Example: `:let g:textidote_html_report = 1`

*g:textidote_win_height*
  Height of the scratch window which contains the list of errors with some
  explanations. You can use a negative value to disable opening the scratch
  window. You can also make it empty `''` to let Vim pick a default size.

  Default value: 14
  Example: `:let g:textidote_win_height = -1`

*g:textidote_lang*
  The language code to use. If undefined, the plugin tries to guess the
  language of the Vim spelling checker 'spelllang' or v:lang. If neither
  work, the plugin defaults to US English (`en` with `TeXtidote` and `en-US`
  with `LanguageTool`). 
  The valid language codes with `TeXtidote` are: `de`, `de_AT`, `de_CH`, `en`, `en_CA`,
  `en_UK`, `es`, `fr`, `nl`, `pt`, `pl`.
  The valid language codes with `LanguageTool` are: `ar`, `ast`, `be`, `br`, `ca`, `cs`,
  `da`, `de`, `de-AT`, `de-CH`, `de-DE`, `el`, `en`, `en-AU`, `en-CA`, `en-GB`, `en-NZ`, `en-US`,
  `en-ZA`, `eo`, `es`, `fa`, `fr`, `ga`, `gl`, `it`, `ja`, `km`, `lt`, `nl`, `pl`, `pt`, `pt-AO`, `pt-BR`,
  `pt-MZ`, `pt-PT`, `ro`, `ru`, `sk`, `sl`, `sr`, `sr-BA`, `sr-HR`, `sr-ME`, `sr-SR`, `sv`, `ta`, `tl`,
  `uk`, `zh`.
  *Important* For `LanguageTool` only and languages with variants, it is
  necessary to specify the variant in order for `LanguageTool` to signal
  spelling errors, otherwise only grammar mistakes are pointed out. For
  example, with `spelllang=en`, you will get only grammar errors from
  `LanguageTool`. If you want spelling errors too, you need to set 
  `spelllang=en_us`, for example. This does not apply to `TeXtidote`.

*g:textidote_first_language*
  Define your first language to enable the checking for false friends.
  Must be either empty or one of the following: `de`, `de_AT`, `de_CH`, `en`, `en_CA`,
  `en_UK`, `es`, `fr`, `nl`, `pt`, `pl`. This option is only used when `TeXtidote` is the
  checker.

  Default value: empty
  Example: `:let g:textidote_first_language = 'fr'`

*g:textidote_dictionary*
  If you have a list of words that you want `TeXtidote` to ignore when checking
  spelling, you can specify a dictionary file. This file must be a plain text
  file containing a list of words to be ignored, with each word on a separate
  line. This option is only used when `TeXtidote` is the checker.
  In the case where you had already set up a |spellfile| in your |vimrc|, for
  use in Vim's own spellchecker, you can also use it with |vim-textidote|. Just
  set:
  `:let g:textidote_dictionary = &spellfile`
  In that case, it is a good idea to make your custom shortcut to toggle
  |vim-textidote| to also run:
  `silent execute 'mkspell! ' . &spellfile`
  to ensure that the spell file used by |spell| is properly updated. This way,
  you will use seamlessly the same dictionary file in Vim's own spell and in 
  |vim-textidote|. One benefit is that you will be able to use Vim's shortcuts
  |zg| and |zug| to add and remove words outside of |vim-textidote|.

  Default value: empty
  Example: `:let g:textidote_dictionary = '~/.vim/dico.txt'`

*g:textidote_ignore_rules*
  You may want to ignore some of `TeXtidote`'s advice. You can do so by 
  specifying rule IDs to ignore (rule IDs are shown between brackets in the
  reports given by `TeXtidote`). This option is only used when `TeXtidote` is the
  checker.

  Default value: empty
  Example: `:let g:textidote_ignore_rules = 'lt:en:EN_REPEATEDWORDS,sh:c:noin'`

*g:textidote_ignore_environments*
  `TeXtidote` can be instructed to remove user-specified environments (including
  all text lines between `\begin{...}` and `\end{...}`).
  Default value: empty
  Example: `:let g:textidote_ignore_environments = 'tikzpicture,equation'`

*g:textidote_ignore_macros*
  Same as above with macros instead of environments.
  Default value: empty
  Example: `:let g:textidote_ignore_macros = 'qed,textsc'`

*g:textidote_replacements*
  Before `TeXtidote` analyses a file, you can ask it to apply a set of
  find/replace operations (for example, to replace a macro by some predefined
  character string). You can write these patterns into a text file. This file
  must be a plain text file containing the find replace patterns. It is
  formatted as follows.
  `# Empty lines beginning with a pound sign are ignored`
  `# Search and replace patterns are separated by a tab`
  `# Patterns can also be regular expressions`
  `abc\d+[^x]	123`
  `foo		bar`
  This option is only used when `TeXtidote` is the checker.
  Default value: empty
  Example: `:let g:textidote_replacements = '~/.vim/remplacements.txt'`

*g:languagetool_disable_rules*
  This variable specifies checker rules to disable, when `LanguageTool` is the
  checker. The set of disabled rule must be comma separated.
  Default value: WHITESPACE_RULE,EN_QUOTES
  Example: `:let g:languagetool_disable_rules='WHITESPACE_RULE,EN_QUOTES,`
  			`FRENCH_WHITESPACE,UPPERCASE_SENTENCE_START,APOS'`

*g:languagetool_enable_rules*
  Some `LanguageTool` rules are disabled by default (rules that contain
  default="off" in grammar.xml) because they might be stylistic, nitpicky
  or give frequent positive. Those rules can be enabled by setting the
  g:languagetool_enable_rules variable. 
  Default value: empty
  Example: `:let g:languagetool_enable_rules=PASSIVE_VOICE`

*g:languagetool_disable_categories*
  This variable specifies checker rule-categories which are disabled, when
  `LanguageTool` is the checker.
  Default value: empty

*g:languagetool_enable_categories*
  This variable specifies checker rule-categories which are enabled, when 
  `LanguageTool` is the checker.
  Default value: empty

*Important* *remarks*

Fine-tuning of the above options turns out to be very effective in filtering
only the meaningful errors and warnings from `TeXtidote`.

A typical efficient workflow with |vim-textidote| is to get a `reasonable'
number of errors (say, less than 100 or 200), either by fine-tuning the above
options or by visual selecting an appropriate range of text before invoking
`TeXtidote`. Then, the errors can be quickly browsed to discard the non-relevant
ones (for example, the proper nouns) and to narrow the errors to a small amount
(say, less than 20) and, then, fix them.

TeXtitode has real added-value for LaTeX and Markdown files. For other formats,
such as `html` files, the good choice is probably to fall back to `LanguageTool`
which is really faster than `TeXtidote`.

==============================================================================
CUSTOMIZATION                                                  *TeXtidoteCustom*

You can customize the following syntax highlighting groups:

  `TeXtidoteCmd`
  `TeXtidoteErrorCount`
  `TeXtidoteLabel`
  `TeXtidoteGrammarError`
  `TeXtidoteSpellingError`

For example, if you want Textidote spelling and grammar errors look the same
way as in Vim spell, you can put the following lines in your |vimrc|:

`highlight default link TeXtidoteSpellingError 	SpellBad`
`highlight default link TeXtidoteGrammarError 	SpellLocal`

To highlight spelling errors in red, and grammar errors in blue, with a curly
underline in vim GUIs that support it, add this:

`highlight TeXtidoteSpellingError guisp=red gui=undercurl guifg=NONE guibg=NONE`
  			`\ ctermfg=white ctermbg=red term=underline cterm=none`
`highlight TeXtidoteGrammarError guisp=blue gui=undercurl guifg=NONE guibg=NONE`
  			`\ ctermfg=white ctermbg=blue term=underline cterm=none`

==============================================================================
LICENSE                                                       *TeXtidoteLicense*

Copyright © Patrick Ballard.  Distributed under the same terms as Vim itself.
See `:help license`.

==============================================================================
CHANGELOG                                                   *TeXtidoteChangelog*

22/11/2022 Add the <BS> and <S-BS> shortcuts to discard errors
19/11/2022 Fixed <Tab> completion with possibly multibyte characters in file
17/11/2022 Add option to use LanguageTool instead of TeXTidote as the checker
13/11/2022 Add navigation of errors also in the original buffer
06/11/2022 Add navigation of errors and <Tab> completion fix
02/11/2022 Asynchronous version
06/01/2022 Initial version

==============================================================================
CREDITS                                                       *TeXtidoteCredits*

This plugin is strongly based on the excellent plugin `vim-LanguageTool`. 
Large parts of its code have been reused in this plugin.

|https://github.com/dpelle/vim-LanguageTool|
