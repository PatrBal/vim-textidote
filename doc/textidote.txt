*textidote.txt*          Grammar checking of LaTeX files with TeXtidote from Vim
*textidote*
*TeXtidote*

For Neovim and Vim version above 8.0

==============================================================================
CONTENTS                                                     *TeXtidoteContents*

    1. Overview ......................................... |TeXtidoteOverview|
    2. Features ......................................... |TeXtidoteFeatures|
    3. Usage ............................................ |TeXtidoteUsage|
    4. Installation ..................................... |TeXtidoteInstall|
    5. Configuration .................................... |TeXtidoteConfig|
    6. License .......................................... |TeXtidoteLicense|
    7. Changelog ........................................ |TeXtidoteChangelog|
    8. Credits .......................................... |TeXtidoteCredits|

==============================================================================
1. Overview                                                  *TeXtidoteOverview*

This plugin integrates `TeXtidote` into Vim. `TeXtidote` provides online grammar
and style checker for LaTeX documents, but also for Markdown. It is built on 
top of LanguageTool. In fact, `TeXtidote` is able to remove all the markup of 
the original file before calling LanguageTool, but it keeps track of the 
relative position of words between the original and "clean text". In short, 
`TeXtidote` is a version of LanguageTool made blind to LaTeX and Markdown 
markup.
|https://github.com/sylvainhalle/textidote|

==============================================================================
2. Features                                                  *TeXtidoteFeatures*

 - Spelling, grammar and style checking of either the entire buffer or part of
   it.
 - A scratch buffer shows up, listing all the errors. Navigate the errors in
   the scratch buffer with `[[` and `]]`. Press `<Enter>` on an error in the scratch
   buffer to jump to that error where you can hit `<Tab>` to fix it. The `<Tab>`
   shortcut opens a pop-up menu that you can navigate either with `<C-N>` (next)
   and `<C-P>` (previous), or `<Down>` and `<Up>`. Confirm a suggestion with `<C-Y>`
   (yes) or discard all suggestions with `<C-E>` (exit). The shortcut `<Tab>` is
   only active after a jump from the scratch window and should not interfere with
   any other use of <Tab>.
 - The location-list is populated, so that you can use location-list Vim
   commands such as `:lopen` to open the location-list window, `:lne` to jump
   to the next error, etc.
 - Optionally, a full html report of TeXtidote analysis can be displayed in
   the default browser.
 - The plugin makes asynchronous calls to TeXtidote, so that Vim (or Neovim) 
   does not get frozen during the TeXtidote analysis.

==============================================================================
3. Usage                                                        *TeXtidoteUsage*

The plugin provides the new command
`:[range]TeXtidoteToggle`
where the default `[range]` is the whole buffer, except in the case where there
is a visual selection which is then taken as the default `[range]`. This command
launch the checking of `[range]` by TeXtidote, highlights the corresponding
errors and open the scratch buffer listing all the errors. Subsequent
invocation of the same command closes the scratch buffer and clears the error
highlighting.

In addition, there are
`:[range]TeXtidoteCheck`
`:TeXtidoteClear`
which respectively activates the checking and clears it.

==============================================================================
4. Installation                                               *TeXtidoteInstall*

Install `vim-textidote` using your favorite package manager, or use Vim's 
built-in package support:

    `mkdir -p ~/.vim/pack/PatrBal/start`
    `cd ~/.vim/pack/PatrBal/start`
    `git clone https://github.com/PatrBal/vim-textidote`
    `vim -u NONE -c "helptags vim-textidote/doc" -c q`

You must also install `TeXtidote`. Download the latest `textidote.jar` from 
|https://github.com/sylvainhalle/textidote|
and make sure that you have Java version 8 or later installed on your system. 
Alternatively, on Debian systems (Ubuntu and derivatives), you can install 
`TeXtidote` using `dpkg`, and on macOS, using `homebrew`. In that latter case,
the path to the `textidote.jar` in the `.vimrc` should be provided as:
`let g:textidote_jar = '/opt/homebrew/var/homebrew/linked/textidote/libexec/textidote.jar'`
`let g:textidote_jar = '/usr/local/var/homebrew/linked/textidote/libexec/textidote.jar'`
with silicon and intel homebrew, respectively. In my experience, the homebrew
`TeXtidote` is twice faster than the `textidote.jar` from the website.

==============================================================================
5. Configuration                                               *TeXtidoteConfig*

It is convenient to create a mapping in your |vimrc| to quickly invoke the
plugin
`vnoremap <silent> <Leader>te :'<,'>TeXtidoteToggle<CR>`
`nnoremap <silent> <Leader>te :TeXtidoteToggle<CR>`

Several global variables can be set in your |vimrc| to configure the behavior
of the TeXtidote plugin.

*g:textidote_jar*
  Path to `textidote.jar`
  Default value: `$HOME/.vim/textidote.jar`

*g:textidote_html_report*
  Set to `1` if you want to have a html TeXtidote report showing up in your
  default browser, in addition to the scratch buffer in Vim.
  Default value: `0`
  Example: `:let g:textidote_html_report = 1`

*g:textidote_first_language*
  Define your first language to enable the checking for false friends.
  Must be either empty or one of the following: `de`, `de_AT`, `de_CH`, 
  `en`, `en_CA`, `en_UK`, `es`, `fr` ,`nl`, `pt`, `pl`.
  Default value: empty
  Example: `:let g:textidote_first_language = 'fr'`

*g:textidote_lang*
  The language code to use for the TeXtidote checker. If undefined, the
  plugin tries to guess the language of the Vim spelling checker
  'spelllang' or v:lang. If neither work, the plugin defaults to
  English US (en). The valid language codes are: `de`, `de_AT`, `de_CH`, 
  `en`, `en_CA`, `en_UK`, `es`, `fr` ,`nl`, `pt`, `pl`.

*g:textidote_dictionary*
  If you have a list of words that you want TeXtidote to ignore when checking
  spelling, you can specify a dictionary file. This file must be a plain text
  file contain a list of words to be ignored, with each word on a separate
  line.  
  Default value: empty
  Example: `:let g:textidote_dictionary = '~/.vim/dico.txt'`

*g:textidote_ignore_rules*
  You may want to ignore some of TeXtidote's advice. You can do so by 
  specifying rule IDs to ignore (rule IDs are shown between brackets in the
  reports given by TeXtidote).
  Default value: empty
  Example: `:let g:textidote_ignore_rules = 'lt:en:EN_REPEATEDWORDS,sh:c:noin'`

*g:textidote_ignore_environments*
  TeXtidote can be instructed to remove user-specified environments (including
  all text lines between `\begin{...}` and `\end{...}`).
  Default value: empty
  Example: `:let g:textidote_ignore_environments = 'tikzpicture,equation'`

*g:textidote_ignore_macros*
  Same as above with macros instead of environments.
  Default value: empty
  Example: `:let g:textidote_ignore_macros = 'qed,textsc'`

*g:textidote_replacements*
  Before TeXtidote analyses a file, you can ask it to apply a set of
  find/replace operations (for example, to replace a macro by some predefined
  character string). You can write these patterns into a text file. This file
  must be a plain text file containing the find replace patterns. It is
  formatted as follows.
  `# Empty lines beginning with a pound sign are ignored`
  `# Search and replace patterns are separated by a tab`
  `# Patterns can also be regular expressions`
  `abc\d+[^x]	123`
  `foo		bar`
  Default value: empty
  Example: `:let g:textidote_replacements = '~/.vim/remplacements.txt'`


You can also customize the following syntax highlighting groups:

  `TeXtidoteCmd`
  `TeXtidoteErrorCount`
  `TeXtidoteLabel`
  `TeXtidoteGrammarError`
  `TeXtidoteSpellingError`

For example, to highlight grammar errors in blue, and spelling errors in
red, with a curly underline in vim GUIs that support it, add this into your
colorscheme:

  `:hi TeXtidoteGrammarError  guisp=blue gui=undercurl guifg=NONE guibg=NONE ctermfg=white ctermbg=blue term=underline cterm=none`
  `:hi TeXtidoteSpellingError guisp=red  gui=undercurl guifg=NONE guibg=NONE ctermfg=white ctermbg=red  term=underline cterm=none`

==============================================================================
6. License                                                    *TeXtidoteLicense*

Copyright (c) Patrick Ballard.  Distributed under the same terms as Vim itself.
See `:help license`.

==============================================================================
7. Changelog                                                *TeXtidoteChangelog*

06/11/2022 Add navigation of errors and completion fix
02/11/2022 Asynchronous version
06/01/2022 Initial version

==============================================================================
8. Credits                                                    *TeXtidoteCredits*

This plugin is strongly based on the excellent plugin `vim-LanguageTool`. 
Large parts of its code have been reused in this plugin.
|https://github.com/dpelle/vim-LanguageTool|
