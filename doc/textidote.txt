*textidote.txt*          Grammar checking of LaTeX files with TeXtidote from Vim
*textidote*
*TeXtidote*

For Neovim and Vim version above 8.0

==============================================================================
CONTENTS                                                     *TeXtidoteContents*

    1. Overview ......................................... |TeXtidoteOverview|
    2. Features ......................................... |TeXtidoteFeatures|
    3. Usage ............................................ |TeXtidoteUsage|
    4. Installation ..................................... |TeXtidoteInstall|
    5. Configuration .................................... |TeXtidoteConfig|
    6. License .......................................... |TeXtidoteLicense|
    7. Changelog ........................................ |TeXtidoteChangelog|
    8. Credits .......................................... |TeXtidoteCredits|

==============================================================================
1. Overview                                                  *TeXtidoteOverview*

This plugin integrates `TeXtidote` into Vim and Neovim. `TeXtidote` provides
online grammar and style checker for LaTeX documents, but also for Markdown.
It is built on top of `LanguageTool`. In fact, `TeXtidote` is able to remove all
the markup of the original file before calling `LanguageTool`, but it keeps
track of the relative position of words between the original and "clean text".
In short, `TeXtidote` is a version of `LanguageTool` made blind to LaTeX and
Markdown markup. This plugin can also integrate `LanguageTool` into Vim and
Neovim, which was already made available by other good plugins (e.g., 
`vim-grammarous` or `vim-LanguageTool`)

|https://github.com/sylvainhalle/textidote|
|https://languagetool.org|

|https://github.com/rhysd/vim-grammarous|
|https://github.com/dpelle/vim-LanguageTool|

==============================================================================
2. Features                                                  *TeXtidoteFeatures*

 - Asynchronous spell, grammar and style checking of either the entire buffer
   or part of it, with highlight of all the errors and warnings.
 - A scratch buffer shows up, listing all the errors. Navigate the errors with 
   `[` and `]`, both in the scratch buffer and the original buffer. Press <CR> on
   an error in the scratch buffer to jump to that error. Hit <Tab> to fix it.
   The <Tab> shortcut opens a pop-up menu that you can navigate either with
   <C-N> (next) and <C-P> (previous), or <Down> and <Up>. Confirm a suggestion
   with <C-Y> (yes) or discard all suggestions with <C-E> (exit). The shortcut
   <CR> is also active when the cursor is on an error in the original buffer,
   and displays the current error in the scratch buffer. You can also discard
   an error by pressing <BS>, both in the scratch buffer and the original
   buffer. All the original mappings of `[`, `]`, <BS>, <CR> and <Tab> are
   restored when the scratch buffer is cleared.
 - The location-list is populated, so that you can use location-list Vim
   commands such as `:lopen` to open the location-list window, `:lne` to jump
   to the next error, etc.
 - Optionally, a full html report of TeXtidote analysis can be displayed in
   the default browser.

==============================================================================
3. Usage                                                        *TeXtidoteUsage*

The plugin provides the new command
`:[range]TeXtidoteToggle`
where the default `[range]` is the whole buffer, except in the case where there
is a visual selection which is then taken as the default `[range]`. This command
launches the checking of `[range]` by TeXtidote, highlights the corresponding
errors and open the scratch buffer listing all the errors. Subsequent
invocation of the same command closes the scratch buffer and clears the error
highlighting.

In addition, there are
`:[range]TeXtidoteCheck`
`:TeXtidoteClear`
which respectively activates the checking and clears it.

==============================================================================
4. Installation                                               *TeXtidoteInstall*

Install `vim-textidote` using your favorite package manager, or use Vim's 
built-in package support:

    `mkdir -p ~/.vim/pack/PatrBal/start`
    `cd ~/.vim/pack/PatrBal/start`
    `git clone https://github.com/PatrBal/vim-textidote`
    `vim -u NONE -c "helptags vim-textidote/doc" -c q`

You must also install `TeXtidote`. Download the latest `textidote.jar` from 
|https://github.com/sylvainhalle/textidote|
and make sure that you have Java version 8 or later installed on your system. 

Alternatively, on Debian systems (Ubuntu and derivatives), you can install 
`TeXtidote` using `dpkg`, and on macOS, using `homebrew`. In that latter case,
the path to the `textidote.jar` in the `.vimrc` should be provided as:
`let g:textidote_jar =`
	`\ '/opt/homebrew/var/homebrew/linked/textidote/libexec/textidote.jar'`
`let g:textidote_jar =`
	`\ '/usr/local/var/homebrew/linked/textidote/libexec/textidote.jar'`
with silicon and intel homebrew, respectively. In my experience, the homebrew
`TeXtidote` is twice faster than the `textidote.jar` from the website.

If you want to be able to invoke directly `LanguageTool` instead of `TeXtidote`,
you must download the latest `languagetool-commandline.jar` from
|https://languagetool.org/download|
which also requires Java version 8 or later. Again, it is also available from
`dpkg` on Debian systems and from `homebrew` on macOS.

==============================================================================
5. Configuration                                               *TeXtidoteConfig*

It is convenient to create a mapping in your |vimrc| to quickly invoke the
plugin
`vnoremap <silent> <Leader>te :'<,'>TeXtidoteToggle<CR>`
`nnoremap <silent> <Leader>te :TeXtidoteToggle<CR>`

Several global variables can be set in your |vimrc| to configure the behavior
of the TeXtidote plugin.

*g:textidote_jar*
  Path to either `textidote.jar` or `languagetool-commandline.jar`
  Default value: `$HOME/.vim/textidote.jar`

*g:textidote_checker*
  Set it to `'languagetool'` or `'LanguageTool'` if you want to use
  `LanguageTool` as the checker. Leave it unset or set it to `'textidote`' or
  `'TeXtidote'` otherwise.
  Default value: `'textidote'`

*g:textidote_html_report*
  Set to `1` if you want to have a html TeXtidote report showing up in your
  default browser, in addition to the scratch buffer in Vim. This option is
  only available when TeXtidote is the checker (it defaults to 0 otherwise).
  Default value: `0`
  Example: `:let g:textidote_html_report = 1`

*g:textidote_win_height*
  Height of the scratch window which contains the list of errors with some
  explanations. You can use a negative value to disable opening the scratch
  window. You can also make it empty '' to let Vim pick a default size.
  Default value: 14
  Example: `:let g:textidote_win_height = -1`

*g:textidote_lang*
  The language code to use. If undefined, the plugin tries to guess the
  language of the Vim spelling checker 'spelllang' or v:lang. If neither
  work, the plugin defaults to English US (`en` with `TeXtidote` and `en-US`
  with LanguageTool`). 
  The valid language codes with `TeXtidote` are: `de`, `de_AT`, `de_CH`, 
  `en`, `en_CA`, `en_UK`, `es`, `fr`, `nl`, `pt`, `pl`.
  The valid language codes with `LanguageTool` are: `ar`, `ast`, `be`, `br`, `ca`, `cs`,
  `da`, `de`, `de-AT`, `de-CH`, `de-DE`, `el`, `en`, `en-AU`, `en-CA`, `en-GB`, `en-NZ`, `en-US`,
  `en-ZA`, `eo`, `es`, `fa`, `fr`, `ga`, `gl`, `it`, `ja`, `km`, `nl`, `pl`, `pt`, `pt-BR`, `pt-MZ`, `pt-PT`,
  `ro`, `ru`, `sk`, `sl`, `sr`, `sr-BA`, `sr-HR`, `sr-ME`, `sr-SR`, `sv`, `ta`, `tl`, `uk`, `zh`.
  For `LanguageTool` only and languages with variants, it is necessary to
  specify the variant in order for LanguageTool to signal spelling errors, 
  otherwise only grammar mistakes are pointed out.

*g:textidote_first_language*
  Define your first language to enable the checking for false friends.
  Must be either empty or one of the following: `de`, `de_AT`, `de_CH`, `en`, `en_CA`,
  `en_UK`, `es`, `fr`, `nl`, `pt`, `pl`.
  Default value: empty
  Example: `:let g:textidote_first_language = 'fr'`

*g:textidote_dictionary*
  If you have a list of words that you want TeXtidote to ignore when checking
  spelling, you can specify a dictionary file. This file must be a plain text
  file containing a list of words to be ignored, with each word on a separate
  line.  
  Default value: empty
  Example: `:let g:textidote_dictionary = '~/.vim/dico.txt'`

*g:textidote_ignore_rules*
  You may want to ignore some of TeXtidote's advice. You can do so by 
  specifying rule IDs to ignore (rule IDs are shown between brackets in the
  reports given by TeXtidote).
  Default value: empty
  Example: `:let g:textidote_ignore_rules = 'lt:en:EN_REPEATEDWORDS,sh:c:noin'`

*g:textidote_ignore_environments*
  TeXtidote can be instructed to remove user-specified environments (including
  all text lines between `\begin{...}` and `\end{...}`).
  Default value: empty
  Example: `:let g:textidote_ignore_environments = 'tikzpicture,equation'`

*g:textidote_ignore_macros*
  Same as above with macros instead of environments.
  Default value: empty
  Example: `:let g:textidote_ignore_macros = 'qed,textsc'`

*g:textidote_replacements*
  Before TeXtidote analyses a file, you can ask it to apply a set of
  find/replace operations (for example, to replace a macro by some predefined
  character string). You can write these patterns into a text file. This file
  must be a plain text file containing the find replace patterns. It is
  formatted as follows.
  `# Empty lines beginning with a pound sign are ignored`
  `# Search and replace patterns are separated by a tab`
  `# Patterns can also be regular expressions`
  `abc\d+[^x]	123`
  `foo		bar`
  Default value: empty
  Example: `:let g:textidote_replacements = '~/.vim/remplacements.txt'`

*g:languagetool_disable_rules*
  This variable specifies checker rules to disable. The set of disabled rule
  must be comma separated.
  Default value: WHITESPACE_RULE,EN_QUOTES
  Example: `:let g:languagetool_disable_rules='WHITESPACE_RULE,EN_QUOTES,`
  			`FRENCH_WHITESPACE,UPPERCASE_SENTENCE_START,APOS'`

*g:languagetool_enable_rules*
  Some LanguageTool rules are disabled by default (rules that contain
  default="off" in grammar.xml) because they might be stylistic, nitpicky
  or give frequent positive. Those rules can be enabled by setting the
  g:languagetool_enable_rules variable. 
  Default value: empty
  Example: `:let g:languagetool_enable_rules=PASSIVE_VOICE`

*g:languagetool_disable_categories*
  This variable specifies checker rule-categories which are disabled.
  Default value: empty

*g:languagetool_enable_categories*
  This variable specifies checker rule-categories which are enabled.
  Default value: empty

|Important| |remarks|

Fine-tuning of the above options turns out to be very effective in filtering
only the meaningful errors and warnings from TeXtidote.

A typical efficient workflow with `vim-TeXtidote` is to get a `reasonable'
number of errors (say, less than 100 or 200), either by fine-tuning the above
options or by visual selecting an appropriate range of text before invoking
TeXtidote. Then, the errors can be quickly browsed to discard the non-relevant
ones (for example, the proper nouns) and to narrow the errors to a small amount
(say, less than 20) and, then, fix them.

TeXtitode has real added-value for LaTeX and Markdown files. For other formats,
such as `html` files, the good choice is probably to fall back to LanguageTool
which is really faster than TeXtidote.

You can also customize the following syntax highlighting groups:

  `TeXtidoteCmd`
  `TeXtidoteErrorCount`
  `TeXtidoteLabel`
  `TeXtidoteGrammarError`
  `TeXtidoteSpellingError`

For example, to highlight grammar errors in blue, and spelling errors in
red, with a curly underline in vim GUIs that support it, add this into your
colorscheme:

  `:hi TeXtidoteGrammarError guisp=blue gui=undercurl guifg=NONE guibg=NONE`
  			`\ ctermfg=white ctermbg=blue term=underline cterm=none`
  `:hi TeXtidoteSpellingError guisp=red gui=undercurl guifg=NONE guibg=NONE`
  			`\ ctermfg=white ctermbg=red term=underline cterm=none`

==============================================================================
6. License                                                    *TeXtidoteLicense*

Copyright © Patrick Ballard.  Distributed under the same terms as Vim itself.
See `:help license`.

==============================================================================
7. Changelog                                                *TeXtidoteChangelog*

17/11/2022 Add option to use LanguaeTool instead of TeXTidote as the checker
13/11/2022 Add navigation of errors also in the original buffer
06/11/2022 Add navigation of errors and completion fix
02/11/2022 Asynchronous version
06/01/2022 Initial version

==============================================================================
8. Credits                                                    *TeXtidoteCredits*

This plugin is strongly based on the excellent plugin `vim-LanguageTool`. 
Large parts of its code have been reused in this plugin.

|https://github.com/dpelle/vim-LanguageTool|
